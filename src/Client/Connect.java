/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author nnt12
 */
public class Connect extends javax.swing.JDialog {

    /**
     * Creates new form Connect
     */
    
    public DataOutputStream out = null;
    public DataInputStream in = null;
    public Socket sk = null;
    
    public Connect(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.client = (Client) parent;
        connect(txt_host.getText(),Integer.parseInt(txt_port.getText()) + 1);
    }

    Client client;

    public void connect(String host, int port) {
        try {
            if (sk == null) {
                sk = new Socket(host, port);
                in = new DataInputStream(sk.getInputStream());
                out = new DataOutputStream(sk.getOutputStream());
            }
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void send(String str) {
        try {
            out.writeUTF(str);
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txt_pass = new javax.swing.JPasswordField();
        txt_mail = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        txt_dn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        bt_dk = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txt_host = new javax.swing.JTextField();
        txt_port = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jButton1.setText("Đóng");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txt_dn.setText("Đăng nhập");
        txt_dn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_dnActionPerformed(evt);
            }
        });

        jLabel1.setText("Hostname");

        bt_dk.setText("Đăng ký");
        bt_dk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_dkActionPerformed(evt);
            }
        });

        jLabel2.setText("Port");

        txt_host.setText("localhost");

        txt_port.setText("6000");

        jLabel3.setText("Email");

        jLabel4.setText("Password");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_host, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                    .addComponent(txt_port)
                    .addComponent(txt_mail)
                    .addComponent(txt_pass))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(txt_dn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(bt_dk)
                .addGap(49, 49, 49)
                .addComponent(jButton1)
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_host, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_mail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txt_pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(txt_dn)
                    .addComponent(bt_dk))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txt_dnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_dnActionPerformed
        client.connect(txt_host.getText(), Integer.parseInt(txt_port.getText()));
        if (isValidEmailAddress(txt_mail.getText())) {
            try {
                send("003-000@" + txt_mail.getText());
                String msg = in.readUTF();
                String title = msg.substring(0, msg.indexOf("@"));
                if ("000-000".equals(title)) {
                    char[] pass = txt_pass.getPassword();
                    String passString = new String(pass);
                    send("004-000@" + passString);
                    msg = in.readUTF();
                    title = msg.substring(0, msg.indexOf("@"));
                    String body = msg.substring(msg.indexOf("@") + 1);
                    if ("000-000".equals(title)) {
                        client.login = true;
                        client.session = body;
                        client.port = Integer.parseInt(txt_port.getText());
                        JOptionPane.showMessageDialog(this, "đăng nhập thành công");
                        this.dispose();
                    } else {
                        JOptionPane.showMessageDialog(this, "đăng nhập ko thành công");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "bạn chưa đăng kí");
                }
            } catch (IOException ex) {
                Logger.getLogger(Connect.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Email không đúng");
        }
    }//GEN-LAST:event_txt_dnActionPerformed

    public boolean isValidEmailAddress(String email) {
        String ePattern = "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$";
        java.util.regex.Pattern p = java.util.regex.Pattern.compile(ePattern);
        java.util.regex.Matcher m = p.matcher(email);
        return m.matches();
    }

    private void bt_dkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_dkActionPerformed
        if (isValidEmailAddress(txt_mail.getText())) {
            try {
                send("001-000@" + txt_mail.getText());
                String msg = in.readUTF();
                String title = msg.substring(0, msg.indexOf("@"));
                if ("000-000".equals(title)) {
                    char[] pass = txt_pass.getPassword();
                    String passString = new String(pass);
                    send("002-000@" + passString);
                    msg = in.readUTF();
                    title = msg.substring(0, msg.indexOf("@"));
                    if ("000-000".equals(title)) {
                        JOptionPane.showMessageDialog(this, "đăng ký thành công");
                    } else {
                        JOptionPane.showMessageDialog(this, "đăng ký 0 thành công");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Email bị chùng");
                }
            } catch (IOException ex) {
                Logger.getLogger(Connect.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Email không đúng");
        }
    }//GEN-LAST:event_bt_dkActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_dk;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton txt_dn;
    private javax.swing.JTextField txt_host;
    private javax.swing.JTextField txt_mail;
    private javax.swing.JPasswordField txt_pass;
    private javax.swing.JTextField txt_port;
    // End of variables declaration//GEN-END:variables
}
